class Board {
  field Array board;

  field int rabbit_x;
  field int rabbit_y;

  field int fox_x;
  field int fox_y;

  constructor Board new(int bushes) {
      var int i;
      var boolean continue;
      var int x, y;
      var int distance;
      var Array row;

      // allocate and clear the 20 x 20 board
      do Screen.clearScreen();
      let board = Array.new(20);
      let y = 0;
      while (y < 20) {
          let row = Array.new(20);
          let board[y] = row;
          let x = 0;
          while (x < 20) {
              let row[x] = 0; // 0=BLANK
              do Painter.drawBlank(x, y);
              let x = x + 1;
          }
          let y = y + 1;
      }

      // create some bushes
      let i = 0;
      while (i < bushes) {
          let x = Random.next(20);
          let y = Random.next(20);
          if (get(x, y) = 0) { // 0=BLANK
              do set(x, y, 1); // 1=BUSH
              let i = i + 1;
              do Painter.drawBush(x, y);
          }
      }

      // place the rabbit
      let continue = true;
      while (continue) {
          let rabbit_x = Random.next(20);
          let rabbit_y = Random.next(20);
          if (get(rabbit_x, rabbit_y) = 0) { // 0=BLANK
              // place the rabbit here
              do set(rabbit_x, rabbit_y, 2); // 2=RABBIT
              do Painter.drawRabbit(rabbit_x, rabbit_y);
              let continue = false;
          }
      }

      // place the fox
      let continue = true;
      while (continue) {
          let fox_x = Random.next(20);
          let fox_y = Random.next(20);
          let distance = Math.max(Math.abs(fox_x - rabbit_x),
                                  Math.abs(fox_y - rabbit_y));
          if ((distance > 9) & (get(fox_x, fox_y) = 0)) { // 0=BLANK
              // place the fox here
              do set(fox_x, fox_y, 3); // 3=FOX
              do Painter.drawFox(fox_x, fox_y);
              let continue = false;
          }
      }

      return this;
  }

  method int get(int x, int y) {
      var Array row;
      if ((x < 0) | (x > 19) | (y < 0) | (y > 19)) {
          return 4; // 4=WALL
      }
      let row = board[y];
      return row[x];
  }

  method void set(int x, int y, int what) {
      var Array row;
      let row = board[y];
      let row[x] = what;
      return;
  }

  method boolean getFoxX() {
      return fox_x;
  }

  method boolean getFoxY() {
      return fox_y;
  }

  method boolean getRabbitX() {
      return rabbit_x;
  }

  method boolean getRabbitY() {
      return rabbit_y;
  }

  method boolean moveFox(int dir) {
      var int x, y;
      var int what;
      let x = fox_x + getDirX(dir);
      let y = fox_y + getDirY(dir);
      let what = get(x, y);
      if ((what = 0) | (what = 2)) { // 0=BLANK, 2=RABBIT
          do Painter.drawBlank(fox_x, fox_y);
          do set(fox_x, fox_y, 0); // 0=BLANK
          let fox_x = x;
          let fox_y = y;
          do Painter.drawFox(fox_x, fox_y);
          do set(fox_x, fox_y, 3); // 3=FOX
          return true;
      }

      return false;
  }

  method boolean moveRabbit(int dir) {
      var int x, y;
      let x = rabbit_x + getDirX(dir);
      let y = rabbit_y + getDirY(dir);
      if (get(x, y) = 0) { // 0=BLANK
          do Painter.drawBlank(rabbit_x, rabbit_y);
          do set(rabbit_x, rabbit_y, 0); // 0=BLANK
          let rabbit_x = x;
          let rabbit_y = y;
          do Painter.drawRabbit(rabbit_x, rabbit_y);
          do set(rabbit_x, rabbit_y, 2); // 2=RABBIT
          return true;
      }

      return false;
  }

  method int getDirX(int dir) {
      if ((dir < 2) | (dir = 7)) { return 1; }
      if ((dir > 2) & (dir < 6)) { return -1; }
      return 0;
  }

  method int getDirY(int dir) {
      if ((dir > 0) & (dir < 4)) { return -1; }
      if (dir > 4) { return 1; }
      return 0;
  }

  method boolean canMove(int x, int y, int dir) {
      return getDistance(x, y, dir) > 1;
  }

  method int getBlockage(int x, int y, int dir) {
      var int dx, dy, what;
      let dx = getDirX(dir);
      let dy = getDirY(dir);
      let x = x + dx;
      let y = y + dy;
      while ((x > -1) & (x < 20) & (y > -1) & (y < 20)) {
          let what = get(x, y);
          if (~(what = 0)) { // 0=BLANK
              return what;
          }
          let x = x + dx;
          let y = y + dy;
      }
      return 4; // 4=WALL
  }

  method int getDistance(int x, int y, int dir) {
      var int dx, dy, count;
      let dx = getDirX(dir);
      let dy = getDirY(dir);
      let count = 1;
      let x = x + dx;
      let y = y + dy;
      while ((x > -1) & (x < 20) & (y > -1) & (y < 20)) {
          if (~(get(x, y) = 0)) { // 0=BLANK
              return count;
          }
          let x = x + dx;
          let y = y + dy;
          let count = count + 1;
      }
      return count;
  }

  method boolean foxWon() {
      return (fox_x = rabbit_x) & (fox_y = rabbit_y);
  }

  method void counter(int n) {
      do Output.moveCursor(1, 32);
      do Output.printInt(n);
      return;
  }

  method void report(String msg) {
      do Output.moveCursor(2, 32);
      do Output.printString("                              ");
      do Output.moveCursor(2, 32);
      do Output.printString(msg);
      return;
  }

  method void gameover(String msg) {
      do Output.moveCursor(3, 32);
      do Output.printString(msg);
      return;
  }
}